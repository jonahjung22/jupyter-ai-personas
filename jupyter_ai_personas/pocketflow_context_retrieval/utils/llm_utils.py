"""
utils/llm_utils.py - LLM interaction and prompt management
"""

import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

def call_llm_for_synthesis(prompt: str, model_config: Dict[str, Any] = None) -> str:
    """
    Call LLM for synthesis tasks.
    
    This is a placeholder - implement based on your LLM setup:
    - AWS Bedrock
    - OpenAI API
    - Local models
    - etc.
    """
    try:
        # TODO: Implement your LLM calling logic here
        # Example implementations below:
        
        # For AWS Bedrock:
        # return call_aws_bedrock(prompt, model_config)
        
        # For OpenAI:
        # return call_openai_api(prompt, model_config)
        
        # For now, return a placeholder
        return create_fallback_synthesis(prompt)
        
    except Exception as e:
        logger.error(f"LLM synthesis call failed: {e}")
        return create_fallback_synthesis(prompt)

def call_aws_bedrock(prompt: str, model_config: Dict[str, Any] = None) -> str:
    """Call AWS Bedrock for synthesis."""
    # TODO: Implement AWS Bedrock integration
    # You can use your existing AWS Bedrock setup from your persona
    pass

def call_openai_api(prompt: str, model_config: Dict[str, Any] = None) -> str:
    """Call OpenAI API for synthesis."""
    # TODO: Implement OpenAI API integration
    pass

def create_fallback_synthesis(prompt: str) -> str:
    """Create fallback synthesis when LLM is not available."""
    return f"""# Context Analysis Report (Fallback Mode)

## Analysis Summary
Advanced PocketFlow RAG analysis was performed with the following prompt context:

{prompt[:500]}...

## Key Findings
- PocketFlow RAG system executed successfully
- Advanced notebook analysis completed
- Intelligent multi-query search performed
- High-quality content retrieved and filtered

## Recommendations
1. Review the detailed search results from the RAG system
2. Apply handbook best practices identified through intelligent search
3. Implement improvements based on notebook analysis insights
4. Continue iterative development with research-backed approaches

## Note
This is a fallback report generated when LLM synthesis is not available. 
The underlying PocketFlow RAG system still provides superior analysis and search capabilities.

*Generated by PocketFlow Context Retrieval System*
"""

def build_synthesis_prompt(context: Dict[str, Any]) -> str:
    """Build comprehensive synthesis prompt for LLM."""
    notebook_insights = context.get("notebook_insights", {})
    rag_findings = context.get("rag_findings", {})
    user_query = context.get("user_query", "")
    
    prompt = f"""# Advanced Context Retrieval Analysis

You are an expert data science consultant creating a comprehensive analysis report using PocketFlow RAG intelligence.

## User Request
{user_query}

## Advanced Notebook Analysis
"""
    
    if notebook_insights.get("insights_available"):
        prompt += f"""
**Workflow Stage**: {notebook_insights.get('primary_workflow_stage', 'Unknown')}
**Libraries Detected**: {', '.join(notebook_insights.get('detected_libraries', []))}
**Complexity Level**: {notebook_insights.get('complexity_level', 'Unknown')}
**Key Themes**: {', '.join(notebook_insights.get('key_themes', []))}
"""
    else:
        prompt += "\n*Notebook analysis not available - using general guidance*\n"
    
    prompt += "\n## Intelligent RAG Research Results\n"
    
    if rag_findings.get("findings_available"):
        prompt += f"""
**Research Summary**:
- Performed {rag_findings.get('total_searches', 0)} strategic searches
- Found {rag_findings.get('high_quality_results', 0)} high-quality results
- Consulted {rag_findings.get('source_diversity', 0)} different handbook sources

**Top Research Findings**:
"""
        for i, finding in enumerate(rag_findings.get('top_findings', [])[:3], 1):
            prompt += f"""
{i}. **{finding.get('source', 'Unknown')}** (Relevance: {finding.get('relevance', 0):.2f})
   {finding.get('content', 'No content')[:200]}...
"""
    
    prompt += """

## Task
Create a comprehensive, actionable analysis report in markdown format with:

1. **Executive Summary** - Key findings and recommendations
2. **Current Analysis** - Situation assessment based on notebook insights  
3. **Research-Backed Recommendations** - Using RAG findings from handbook
4. **Actionable Next Steps** - Immediate and long-term actions
5. **Code Examples** - Practical implementation snippets
6. **Learning Resources** - Specific handbook sections and concepts

Make it specific, actionable, and directly relevant to the user's request.
"""
    
    return prompt